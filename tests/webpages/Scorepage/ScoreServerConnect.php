<?php
//This sets the connection up, also has the password included
$servername = "127.0.0.1";
////////////////////REMOVE THISv
#$sqlusername = "root";
#$sqlpassword = "VfX!565WW!t552";
////////////////////REMOVE THIS^
$sqlusername = "siteuser";
$sqlpassword = "edcvfr43edcvfr4";
$dbname = "scoreboard_dba";
//these variables are for status reporting
$connectionstatus = "Connection not attempted.";
$connectbool = false;
try {
    // Create connection, username and pw here are for the sql server
    $dbconn = $mysqli = new mysqli($servername, $sqlusername, $sqlpassword, $dbname);
// Check connection and report errors
    error_reporting(E_ALL);
    mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
    $connectionstatus = "Connection Successful.";
    $connectbool = true;
} catch (mysqli_sql_exception $e){
    $connectionstatus = "Connection to server failed";
    echo $connectionstatus;
}

#echo "Connection successful.";
# So what the following does is effectively makes a second table where there is a counter column called score_rank
# because mysql has deprecated the simple version of this that might be buggy sometimes instead of fixing it so we can
# have a normal ranking column because "ouh mah-hai, it's a QUERY language you shouldn't put your *rank* on the table".
# This means I can't just have the ranks on the table and auto-update with an incrementor every time a row is added
# which would allow me to pull ranks directly by number or username, That would be too simple, of course.
# So instead of auto-updating with a simple in-query incrementor I now have to query it to:
# 1) Generate a second temporary table off of the username (That's the first line) from the original table (line 2)
# 2) Join these two together by comparing the scores to *themselves* (i.e. the score_rank column on t2 is generated by
#    literally taking the row number after the table has been ordered by "how many user scores are higher than or equal
#    to the user score being looked at,
# 3) Select the username in question when applicable
# 4) include columns not referenced in the where clause in the group by (group by is used for the aggregation of results)
# 5) finally order the thing by the score_rank. but we can't SELECT by the score rank because that would be too easy.
$ranking = mysqli_query($mysqli, "SELECT users.user_name, users.user_score, users.digits, count(t2.user_name) score_rank
FROM users
LEFT JOIN users t2 ON t2.user_score >= users.user_score
/*WHERE users.user_name='test2'*/
GROUP BY user_name, user_score, digits
ORDER BY score_rank;");

########unfinished pull of digits table
/*$simdigits = mysqli_query($mysqli, "SELECT digits.user_name, users.user_score, users.digits, count(t2.user_name) score_rank
FROM users
LEFT JOIN users t2 ON t2.user_score >= users.user_score
/*WHERE users.user_name='test2'*/
/*GROUP BY user_name, user_score, digits
ORDER BY score_rank;");*/
